/**
 * 
 */
package examples;

import java.io.File;
import java.util.Iterator;
import java.util.Map;

import polyglot.ast.Stmt;
import soot.Body;
import soot.BodyTransformer;
import soot.PackManager;

/**
 * @author islamazhar
 *
 */

import soot.Scene;
import soot.SootClass;
import soot.Transform;
import soot.Unit;
import soot.options.Options;

public class CreateJimple extends BodyTransformer{

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		String mainclass = "ppa.HelloThread";
		
		//String javaHome = System.getenv("JAVA_HOME");

		String javaHome = "/usr/lib/jvm/java-8-openjdk-amd64";
        if (javaHome == null || javaHome.isEmpty()) {

            System.err.println("Please set JAVA_HOME");
            System.exit(1);
        }
		
		//System.out.println(javaHome);
		
		//Options.v().set_allow_phantom_refs(true);
		//Options.v().set_allow_phantom_refs(true);
        Options.v().set_keep_line_number(true);
        Options.v().set_output_format(Options.output_format_jimple);
        Options.v().set_src_prec(Options.src_prec_java);
        
        args[0] = "ppa.HelloThread";
        StringBuilder snippets = new StringBuilder();
        for(String snippetPath : args) {
        	snippets.append(snippetPath)
        			.append(":");
        }
        // java -jar ppa_0.1.jar -src-prec java -f jimple -allow-phantom-refs -d examples/output -cp rt.jar:examples/src test.ppa.A
        Scene.v().setSootClassPath(javaHome + "/jre/lib/rt.jar:"
                + javaHome + "/jre/lib/jce.jar:" + snippets.toString());
        
        CreateJimple analysis = new CreateJimple();
        PackManager.v().getPack("jtp").add(new Transform("jtp.TestSoot", analysis));
        Options.v().set_app(true);
        SootClass appclass = Scene.v().loadClassAndSupport(mainclass);
        Scene.v().setMainClass(appclass);
        Scene.v().loadNecessaryClasses();
        
        PackManager.v().runPacks();
      
	}

	@Override
	protected void internalTransform(Body b, String phaseName, Map options) {
			Iterator<Unit> it = b.getUnits().snapshotIterator();
		    while(it.hasNext()){
		    	Stmt stmt = (Stmt)it.next();

		    	System.out.println(stmt);
		    }
	}

}
