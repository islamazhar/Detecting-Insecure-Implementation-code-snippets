@inproceedings{fischer2017stack,
  title={Stack overflow considered harmful? the impact of copy\&paste on android application security},
  author={Fischer, Felix and B{\"o}ttinger, Konstantin and Xiao, Huang and Stransky, Christian and Acar, Yasemin and Backes, Michael and Fahl, Sascha},
  booktitle={2017 IEEE Symposium on Security and Privacy (SP)},
  pages={121--136},
  year={2017},
  organization={IEEE}
}
@inproceedings{meng2018secure,
  title={Secure coding practices in java: Challenges and vulnerabilities},
  author={Meng, Na and Nagy, Stefan and Yao, Danfeng and Zhuang, Wenjie and Argoty, Gustavo Arango},
  booktitle={Proceedings of the 40th International Conference on Software Engineering},
  pages={372--383},
  year={2018}
}
@inproceedings{svyatkovskiy2019pythia,
  title={Pythia: ai-assisted code completion system},
  author={Svyatkovskiy, Alexey and Zhao, Ying and Fu, Shengyu and Sundaresan, Neel},
  booktitle={Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery \& Data Mining},
  pages={2727--2735},
  year={2019}
}
@inproceedings{dagenais2008enabling,
  title={Enabling static analysis for partial java programs},
  author={Dagenais, Barth{\'e}l{\'e}my and Hendren, Laurie},
  booktitle={Proceedings of the 23rd ACM SIGPLAN conference on Object-oriented programming systems languages and applications},
  pages={313--328},
  year={2008}
}
@inproceedings{albarghouthi2017repairing,
  title={Repairing decision-making programs under uncertainty},
  author={Albarghouthi, Aws and D’Antoni, Loris and Drews, Samuel},
  booktitle={International Conference on Computer Aided Verification},
  pages={181--200},
  year={2017},
  organization={Springer}
}
@article{vallee1998jimple,
  title={Jimple: Simplifying Java bytecode for analyses and transformations},
  author={Vallee-Rai, Raja and Hendren, Laurie J},
  year={1998},
  publisher={Citeseer}
}
@article{rolim2018learning,
  title={Learning quick fixes from code repositories},
  author={Rolim, Reudismam and Soares, Gustavo and Gheyi, Rohit and Barik, Titus and D'Antoni, Loris},
  journal={arXiv preprint arXiv:1803.03806},
  year={2018}
}
@INPROCEEDINGS{akondsnakes,
  author={A. {Rahman} and E. {Farhana} and N. {Imtiaz}},
  booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)}, 
  title={Snakes in Paradise?: Insecure Python-Related Coding Practices in Stack Overflow}, 
  year={2019},
  volume={},
  number={},
  pages={200-204},
  doi={10.1109/MSR.2019.00040}
}
@misc{soot,
  author       = {Soot},
  title        = {- {A} framework for analyzing and transforming {J}ava and {A}ndroid applications},
  howpublished = {\url{https://soot-oss.github.io/soot/}},
  year         = {1999}
}
@INPROCEEDINGS{use-def,
  author={H. Y. {Yang} and E. {Tempero} and H. {Melton}},
  booktitle={19th Australian Conference on Software Engineering (aswec 2008)}, 
  title={An Empirical Study into Use of Dependency Injection in Java}, 
  year={2008},
  volume={},
  number={},
  pages={239-247},
  doi={10.1109/ASWEC.2008.4483212}
  }
@INPROCEEDINGS{program-slicing,
  author={A. {De Lucia}},
  booktitle={Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation}, 
  title={Program slicing: methods and applications}, 
  year={2001},
  volume={},
  number={},
  pages={142-149},
  doi={10.1109/SCAM.2001.972675}
  }
  @inproceedings{cryptogurd,
    author = {Rahaman, Sazzadur and Xiao, Ya and Afrose, Sharmin and Shaon, Fahad and Tian, Ke and Frantz, Miles and Kantarcioglu, Murat and Yao, Danfeng (Daphne)},
    title = {CryptoGuard: High Precision Detection of Cryptographic Vulnerabilities in Massive-Sized Java Projects},
    year = {2019},
    isbn = {9781450367479},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3319535.3345659},
    doi = {10.1145/3319535.3345659},
    abstract = {Cryptographic API misuses, such as exposed secrets, predictable random numbers, and vulnerable certificate verification, seriously threaten software security. The vision of automatically screening cryptographic API calls in massive-sized (e.g., millions of LoC) programs is not new. However, hindered by the practical difficulty of reducing false positives without compromising analysis quality, this goal has not been accomplished. CryptoGuard is a set of detection algorithms that refine program slices by identifying language-specific irrelevant elements. The refinements reduce false alerts by 76% to 80% in our experiments. Running our tool, CryptoGuard, on 46 high-impact large-scale Apache projects and 6,181 Android apps generated many security insights. Our findings helped multiple popular Apache projects to harden their code, including Spark, Ranger, and Ofbiz. We also have made progress towards the science of analysis in this space, including manually analyzing 1,295 Apache alerts, confirming 1,277 true positives (98.61% precision), and in-depth comparison with leading solutions including CrySL, SpotBugs, and Coverity.},
    booktitle = {Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {2455–2472},
    numpages = {18},
    keywords = {benchmark, false negative, Java, false positive, cryptographic API misuses, accuracy, static program analysis},
    location = {London, United Kingdom},
    series = {CCS '19}
}
@inproceedings{subramanian2013making,
  title={Making sense of online code snippets},
  author={Subramanian, Siddharth and Holmes, Reid},
  booktitle={2013 10th Working Conference on Mining Software Repositories (MSR)},
  pages={85--88},
  year={2013},
  organization={IEEE}
}
@misc{stackoverflow-survey,
  author       = {Stack {O}verflow {D}eveloper {S}urvey 2020},
  title        = {- {M}ost {L}oved, {D}readed, and {W}anted {L}anguages},
  howpublished = {\url{https://insights.stackoverflow.com/survey/2020\#technology-most-loved-dreaded-and-wanted-languages-loved}},
  year         = {2020}
}
@article{automated-program-repair,
author = {Goues, Claire Le and Pradel, Michael and Roychoudhury, Abhik},
title = {Automated Program Repair},
year = {2019},
issue_date = {December 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {62},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/3318162},
doi = {10.1145/3318162},
abstract = {Automated program repair can relieve programmers from the burden of manually fixing the ever-increasing number of programming mistakes.},
journal = {Commun. ACM},
month = nov,
pages = {56–65},
numpages = {10}
}
@incollection{devign_neurips19,
title = {Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks},
author = {Zhou, Yaqin and Liu, Shangqing and Siow, Jingkai and Du, Xiaoning and Liu, Yang},
booktitle = {Advances in Neural Information Processing Systems (NeurIPS) 32},
pages = {10197--10207},
year = {2019},
publisher = {Curran Associates, Inc.}
}
@INPROCEEDINGS{Automated-Vulnerability-Detection-in-Source-Code-Using-Deep-Representation-Learning,  
  author={R. {Russell} and L. {Kim} and L. {Hamilton} and T. {Lazovich} and J. {Harer} and O. {Ozdemir} and P. {Ellingwood} and M. {McConley}},  booktitle={2018 17th IEEE International Conference on Machine Learning and Applications (ICMLA)},   
  title={Automated Vulnerability Detection in Source Code Using Deep Representation Learning},   
  year={2018},  
  volume={},  
  number={},  
  pages={757-762},  
  doi={10.1109/ICMLA.2018.00120}
}
@INPROCEEDINGS{are-we-there-yet,
  author={D. {Di Nucci} and F. {Palomba} and D. A. {Tamburri} and A. {Serebrenik} and A. {De Lucia}},
  booktitle={2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={Detecting code smells using machine learning techniques: Are we there yet?}, 
  year={2018},
  volume={},
  number={},
  pages={612-621},
  doi={10.1109/SANER.2018.8330266}}

  @INPROCEEDINGS{8816778,
  author={S. {Baltes} and C. {Treude} and S. {Diehl}},
  booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)}, 
  title={SOTorrent: Studying the Origin, Evolution, and Usage of Stack Overflow Code Snippets}, 
  year={2019},
  volume={},
  number={},
  pages={191-194},
  doi={10.1109/MSR.2019.00038}}
@misc{java-so-cyber-bullying,
  author       = {Stack Overflow},
  title        = {java - When I try to convert a string with certificate, Exception is raised},
  howpublished = {\url{https://stackoverflow.com/questions/10594000/when-i-try-to-convert-a-string-with-certificate-exception-is-raised}},
  year         = {2015}
}